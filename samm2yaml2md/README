The `samm2-yaml2pdf.tgz` archive contains all you need to build the pdf. You do need to copy current Datafiles into the Datafiles/ directory.

It is self-contained, type make to create the `samm2.pdf` book.

  - The script for creating a pdf is `make_pdf.sh`. Until we figure out how to create a table of contents without fuss, run bin/make_pdf_with_toc.sh after make_pdf.sh has run correctly.
  - The script for creating web pages is `make_web.sh`

The bundled source code archive was generated using `make release.`

# Overview

We currently generate a very basic functional PDF for reviewing purposes, etc.

The current flow is: 

  - yaml + templating + namespacing + namespace to template mapping -> markdown via a custom script
  - markdown + css -> html (via pandoc)
  - html -> pdf (via pandoc using wkhtmltopdf driver)

The pdf is currently rendered from the yaml model content files using the following flow:

  - create a markdown template sing mustache templating to insert the data from the yaml files. In some casess (e.g. the practices in a generic business function) it is possible to create this up-front since the template requires no logic or looping. These are stored in static.templates/ and will be automatically copied into the templates/ directory at build time. In other cases, to keep our templating simple and not start trying to express flow and logic concepts, the template files are generated by simple code, directly from the model (make_namespaces.py). Changing those templates requires changing the respective functions in the source. This is currently simple enough.
    - Since many keys have the same name across different yaml model object files (e.g. id, name, etc.) we need a namespacing concept within the mustache templates to indicate which element we mean (e.g. id from Practice, or from Maturity Level). 
    - The necessary namespace files for use with each template are generated from a yaml model file (e.g. Practice G-Education-Guidance.yml) by make_namespaces.py and written to namespaces/. 
  - Since 1 template file can be reused with different namespace files to produce different markdown files, we need a way of maping which namespace file goes with which template. This is done by a simple script (map_ns2template.sh). There are currently only a couple of cases.
  - Another script combines each namespace file with a template file to create a markdown file. actually, it generates a script that does it and then runs the script.
  - pandoc generates a pdf for each markdown file, going via html and css.
  - all pdfs are collated using pdfunite into a final pdf document.


# Changing the pdf

To change the content of the pdf: 

  - If the changes are in the static templates (e.g. the description of the activities), modify the contents of static.templates/*.template. All properties of the model objects should now be accessible vi the (autogenerated) namespace files (see below).
  - If the changes are in the more complex code-generated templates (e.g. the businessFunction* pages), then you'll have to update the code in make_namespaces.py. Look at main(), there's 1 method per type of template/namespace we generate. Change that or create new methods for new templates.
    - Alternatively, if it's just a question of adding static text somewhere, it may be simpler to insert another step in the pipeline (driven by make_pdf.sh) that does it.

For the pages generated from the static template (e.g. activities from static.templates/generic.template), you can reference any data in the yaml model files via {{namespace:item}} where namespace will refer to a particular object (i.e. yaml file) and item to the key (data) within that file. Each model object has its own namespace defined. They are:
      - activity-a
      - activity-b
      - answerset-a
      - answerset-b
      - maturity
      - practice
      - practice-level
      - question-a
      - question-b
      - stream-a
      - stream-b

Look into the yaml file for any model object to find the corresponding `item` name for the data you want to use.

  - The template file can use all namespaces defined above and access any element in the yaml using its name, e.g. {{practice:name}} or {{question-a:values.text}}
  - make sure the namespace you need is included in the namespace file in namespaces/. As a workaround, if necessary, you can always add it manually to the template's corresponding namespace file before generating the markdown but this is likely to be cumbersome if you have to do it for many files.
  - if you're formatting things using css, update the files in css/
  - generate the html and pdf using pandoc (make -n <filename>.html or .pdf to see the full command you need)

# Running the code
The code is in samm2-yaml2pdf.tgz
Extract it, update the Datafiles from a master branch, then run ./make_pdf.sh (optionally followed by ./bin/make_pdf_with_toc.sh) or .make_web.sh
The pdf will be in pdf/samm2.pdf

You'll probably need to pull a bunch of dependencies to get the code working though. Will bundle it as a docker image once there's sufficient need.
